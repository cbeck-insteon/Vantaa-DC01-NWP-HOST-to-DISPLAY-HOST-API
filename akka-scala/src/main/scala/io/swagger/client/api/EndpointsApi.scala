/**
 * Vantaa DC01-NWP HOST to DISPLAY HOST API 
 * API for Vantaa DC01 between NETWORK HOST [NWP] and DISPLAY HOST [DHP].  You can find out more about Smartlabs DC01 at [https://smartlabsinc.com](h://smartlabsinc.com).   For this sample, you can use the api key `special-key` to test the authorization     filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@smartlabsinc.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.api

import io.swagger.client.model.Batterylow
import io.swagger.client.model.Batteryverylow
import io.swagger.client.model.Cold
import io.swagger.client.model.Dark
import io.swagger.client.model.Dialswitch
import io.swagger.client.model.Eventlist
import io.swagger.client.model.Heartbeat
import io.swagger.client.model.Hot
import io.swagger.client.model.Keptawake
import io.swagger.client.model.Keypadswitch
import io.swagger.client.model.Motiondetected
import io.swagger.client.model.Multisensor
import io.swagger.client.model.Outlet
import io.swagger.client.model.Paddleswitch
import io.swagger.client.model.Verycold
import io.swagger.client.model.Veryhot
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object EndpointsApi {

  /**
   * 
   * Expected answers:
   *   code 405 :  (Invalid input)
   * 
   * Available security schemes:
   *   api_key (apiKey)
   * 
   * @param apiKey 
   * @param iNSTEONID The name of the Insteon ID that being added. USE AA:BB:CC for test 
   * @param body objects needed to add a dial switch
   */
  def addDialswitch(apiKey: String, iNSTEONID: String, body: Dialswitch)(implicit apiKey: ApiKeyValue): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://virtserver.swaggerhub.com/cbeck-insteon/test/1.0.0", "/endpoints/dialswitch", "application/json")
      .withApiKey(apiKey, "api_key", HEADER)
      .withBody(body)
      .withQueryParam("INSTEON ID", iNSTEONID)
      .withHeaderParam("api_key", apiKey)
      .withErrorResponse[Unit](405)
        /**
   * 
   * Expected answers:
   *   code 405 :  (Invalid input)
   * 
   * Available security schemes:
   *   api_key (apiKey)
   * 
   * @param apiKey 
   * @param iNSTEONID The name of the Insteon ID that being added. USE AA:BB:CC for test 
   * @param body objects needed to add a keypad switch
   */
  def addKeypadswitch(apiKey: String, iNSTEONID: String, body: Keypadswitch)(implicit apiKey: ApiKeyValue): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://virtserver.swaggerhub.com/cbeck-insteon/test/1.0.0", "/endpoints/keypadswitch", "application/json")
      .withApiKey(apiKey, "api_key", HEADER)
      .withBody(body)
      .withQueryParam("INSTEON ID", iNSTEONID)
      .withHeaderParam("api_key", apiKey)
      .withErrorResponse[Unit](405)
        /**
   * 
   * Expected answers:
   *   code 405 :  (Invalid input)
   * 
   * Available security schemes:
   *   api_key (apiKey)
   * 
   * @param apiKey 
   * @param iNSTEONID The name of the Insteon ID that being added. USE AA:BB:CC for test 
   * @param body objects needed to add a multisensor
   */
  def addMultisensor(apiKey: String, iNSTEONID: String, body: Multisensor)(implicit apiKey: ApiKeyValue): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://virtserver.swaggerhub.com/cbeck-insteon/test/1.0.0", "/endpoints/multisensor", "application/json")
      .withApiKey(apiKey, "api_key", HEADER)
      .withBody(body)
      .withQueryParam("INSTEON ID", iNSTEONID)
      .withHeaderParam("api_key", apiKey)
      .withErrorResponse[Unit](405)
        /**
   * 
   * Expected answers:
   *   code 405 :  (Invalid input)
   * 
   * Available security schemes:
   *   api_key (apiKey)
   * 
   * @param apiKey 
   * @param iNSTEONID The name of the Insteon ID that being added. USE AA:BB:CC for test 
   * @param body objects needed to add an outlet
   */
  def addOutlet(apiKey: String, iNSTEONID: String, body: Outlet)(implicit apiKey: ApiKeyValue): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://virtserver.swaggerhub.com/cbeck-insteon/test/1.0.0", "/endpoints/outlet", "application/json")
      .withApiKey(apiKey, "api_key", HEADER)
      .withBody(body)
      .withQueryParam("INSTEON ID", iNSTEONID)
      .withHeaderParam("api_key", apiKey)
      .withErrorResponse[Unit](405)
        /**
   * 
   * Expected answers:
   *   code 405 :  (Invalid input)
   * 
   * Available security schemes:
   *   api_key (apiKey)
   * 
   * @param apiKey 
   * @param iNSTEONID The name of the Insteon ID that being added. USE AA:BB:CC for test 
   * @param body objects needed to add a paddle switch
   */
  def addPaddleswitch(apiKey: String, iNSTEONID: String, body: Paddleswitch)(implicit apiKey: ApiKeyValue): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://virtserver.swaggerhub.com/cbeck-insteon/test/1.0.0", "/endpoints/paddleswitch", "application/json")
      .withApiKey(apiKey, "api_key", HEADER)
      .withBody(body)
      .withQueryParam("INSTEON ID", iNSTEONID)
      .withHeaderParam("api_key", apiKey)
      .withErrorResponse[Unit](405)
        /**
   * 
   * Expected answers:
   *   code 405 :  (Invalid input)
   * 
   * @param body indicates device in in low battery condition
   */
  def batterylow(body: Batterylow): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://virtserver.swaggerhub.com/cbeck-insteon/test/1.0.0", "/endpoints/multisensor/notifications/batterylow", "application/json")
      .withBody(body)
      .withErrorResponse[Unit](405)
        /**
   * 
   * Expected answers:
   *   code 405 :  (Invalid input)
   * 
   * @param body indicates device is in very low battery condition
   */
  def batteryverylow(body: Batteryverylow): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://virtserver.swaggerhub.com/cbeck-insteon/test/1.0.0", "/endpoints/multisensor/notifications/batteryverylow", "application/json")
      .withBody(body)
      .withErrorResponse[Unit](405)
        /**
   * 
   * Expected answers:
   *   code 405 :  (Invalid input)
   * 
   * @param body indicates if device in a cold enviroment
   */
  def cold(body: Cold): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://virtserver.swaggerhub.com/cbeck-insteon/test/1.0.0", "/endpoints/multisensor/notifications/cold", "application/json")
      .withBody(body)
      .withErrorResponse[Unit](405)
        /**
   * 
   * Expected answers:
   *   code 405 :  (Invalid input)
   * 
   * @param body indicates if device in a dark enviroment
   */
  def dark(body: Dark): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://virtserver.swaggerhub.com/cbeck-insteon/test/1.0.0", "/endpoints/multisensor/notifications/dark", "application/json")
      .withBody(body)
      .withErrorResponse[Unit](405)
        /**
   * 
   * Expected answers:
   *   code 400 :  (Invalid ID supplied)
   * 
   * Available security schemes:
   *   api_key (apiKey)
   * 
   * @param apiKey 
   * @param iNSTEONID Endpoint INSTEON ID
   */
  def deleteEndpoint(apiKey: String, iNSTEONID: String)(implicit apiKey: ApiKeyValue): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.DELETE, "https://virtserver.swaggerhub.com/cbeck-insteon/test/1.0.0", "/endpoints/{INSTEON ID}", "application/json")
      .withApiKey(apiKey, "api_key", HEADER)
      .withPathParam("INSTEON ID", iNSTEONID)
      .withHeaderParam("api_key", apiKey)
      .withErrorResponse[Unit](400)
        /**
   * 
   * Expected answers:
   *   code 405 :  (Invalid input)
   * 
   * @param body sends array of most recent notification events 
   */
  def eventlist(body: Eventlist): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://virtserver.swaggerhub.com/cbeck-insteon/test/1.0.0", "/endpoints/multisensor/notifications/eventlist", "application/json")
      .withBody(body)
      .withErrorResponse[Unit](405)
        /**
   * 
   * Expected answers:
   *   code 405 :  (Invalid input)
   * 
   * @param body indicates if device if the device heartbeat has not been recored in 24hr 
   */
  def heartbeat(body: Heartbeat): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://virtserver.swaggerhub.com/cbeck-insteon/test/1.0.0", "/endpoints/multisensor/notifications/heartbeat", "application/json")
      .withBody(body)
      .withErrorResponse[Unit](405)
        /**
   * 
   * Expected answers:
   *   code 405 :  (Invalid input)
   * 
   * @param body indicates if device in a hot enviroment
   */
  def hot(body: Hot): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://virtserver.swaggerhub.com/cbeck-insteon/test/1.0.0", "/endpoints/multisensor/notifications/hot", "application/json")
      .withBody(body)
      .withErrorResponse[Unit](405)
        /**
   * 
   * Expected answers:
   *   code 405 :  (Invalid input)
   * 
   * @param body indicates if device is in kept awake condition
   */
  def keptawake(body: Keptawake): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://virtserver.swaggerhub.com/cbeck-insteon/test/1.0.0", "/endpoints/multisensor/notifications/keptawake", "application/json")
      .withBody(body)
      .withErrorResponse[Unit](405)
        /**
   * 
   * Expected answers:
   *   code 405 :  (Invalid input)
   * 
   * Available security schemes:
   *   api_key (apiKey)
   * 
   * @param apiKey 
   * @param iNSTEONID The name of the Insteon ID that being modified. USE AA:BB:CC for test 
   * @param body objects needed to modify dial switch
   */
  def modifyDialswitch(apiKey: String, iNSTEONID: String, body: Dialswitch)(implicit apiKey: ApiKeyValue): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.PUT, "https://virtserver.swaggerhub.com/cbeck-insteon/test/1.0.0", "/endpoints/dialswitch", "application/json")
      .withApiKey(apiKey, "api_key", HEADER)
      .withBody(body)
      .withQueryParam("INSTEON ID", iNSTEONID)
      .withHeaderParam("api_key", apiKey)
      .withErrorResponse[Unit](405)
        /**
   * 
   * Expected answers:
   *   code 405 :  (Invalid input)
   * 
   * Available security schemes:
   *   api_key (apiKey)
   * 
   * @param apiKey 
   * @param iNSTEONID The name of the Insteon ID that being modified. USE AA:BB:CC for test 
   * @param body objects needed to modify keypad
   */
  def modifyKeypadswitch(apiKey: String, iNSTEONID: String, body: Keypadswitch)(implicit apiKey: ApiKeyValue): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.PUT, "https://virtserver.swaggerhub.com/cbeck-insteon/test/1.0.0", "/endpoints/keypadswitch", "application/json")
      .withApiKey(apiKey, "api_key", HEADER)
      .withBody(body)
      .withQueryParam("INSTEON ID", iNSTEONID)
      .withHeaderParam("api_key", apiKey)
      .withErrorResponse[Unit](405)
        /**
   * 
   * Expected answers:
   *   code 405 :  (Invalid input)
   * 
   * Available security schemes:
   *   api_key (apiKey)
   * 
   * @param apiKey 
   * @param iNSTEONID The name of the Insteon ID that being modified. USE AA:BB:CC for test 
   * @param body objects needed to modify outlet
   */
  def modifyOutlet(apiKey: String, iNSTEONID: String, body: Outlet)(implicit apiKey: ApiKeyValue): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.PUT, "https://virtserver.swaggerhub.com/cbeck-insteon/test/1.0.0", "/endpoints/outlet", "application/json")
      .withApiKey(apiKey, "api_key", HEADER)
      .withBody(body)
      .withQueryParam("INSTEON ID", iNSTEONID)
      .withHeaderParam("api_key", apiKey)
      .withErrorResponse[Unit](405)
        /**
   * 
   * Expected answers:
   *   code 405 :  (Invalid input)
   * 
   * Available security schemes:
   *   api_key (apiKey)
   * 
   * @param apiKey 
   * @param iNSTEONID The name of the Insteon ID that being modified. USE AA:BB:CC for test 
   * @param body objects needed to modify a paddle switch
   */
  def modifyPaddleswitch(apiKey: String, iNSTEONID: String, body: Paddleswitch)(implicit apiKey: ApiKeyValue): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.PUT, "https://virtserver.swaggerhub.com/cbeck-insteon/test/1.0.0", "/endpoints/paddleswitch", "application/json")
      .withApiKey(apiKey, "api_key", HEADER)
      .withBody(body)
      .withQueryParam("INSTEON ID", iNSTEONID)
      .withHeaderParam("api_key", apiKey)
      .withErrorResponse[Unit](405)
        /**
   * 
   * Expected answers:
   *   code 405 :  (Invalid input)
   * 
   * @param body indicates if motion detected
   */
  def motionDetected(body: Motiondetected): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://virtserver.swaggerhub.com/cbeck-insteon/test/1.0.0", "/endpoints/multisensor/notifications/motiondetected", "application/json")
      .withBody(body)
      .withErrorResponse[Unit](405)
        /**
   * 
   * Expected answers:
   *   code 405 :  (Invalid input)
   * 
   * @param body indicates if device in a very cold enviroment
   */
  def verycold(body: Verycold): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://virtserver.swaggerhub.com/cbeck-insteon/test/1.0.0", "/endpoints/multisensor/notifications/verycold", "application/json")
      .withBody(body)
      .withErrorResponse[Unit](405)
        /**
   * 
   * Expected answers:
   *   code 405 :  (Invalid input)
   * 
   * @param body indicates if device in a very hot enviroment
   */
  def veryhot(body: Veryhot): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://virtserver.swaggerhub.com/cbeck-insteon/test/1.0.0", "/endpoints/multisensor/notifications/veryhot", "application/json")
      .withBody(body)
      .withErrorResponse[Unit](405)
      

}

